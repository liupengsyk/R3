///////////////////////////////////////////////////////////////////////////////
//  File generated by HDevelop for HALCON/C++ Version 10.0
///////////////////////////////////////////////////////////////////////////////



#include "HalconCpp.h"



using namespace Halcon;


#ifndef NO_EXPORT_MAIN
// Main procedure 
void action()
{
  using namespace Halcon;

  // Local iconic variables 
  Hobject  Image, GrayImage, ImageZoom, ImageMean;
  Hobject  ImageSub, ImageEmphasize, Region, RegionFillUp;
  Hobject  ConnectedRegions, SelectedRegions, RegionTrans;
  Hobject  RegionErosion, RegionDifference, RegionOpening;
  Hobject  Rectangle, RegionIntersection, RegionClosing, RegionTransCircle;
  Hobject  SelectedRegionsCircle;


  // Local control variables 
  HTuple  ImageFiles, Index, Width, Height, WindowHandle;
  HTuple  Area, Row, Column, Max, Min, RowRoll, ColumnRoll;
  HTuple  RollWidth, RowDot, ColumnDot;

  //Code generated by Image Acquisition 01
  list_files("E:/Work/Temp/AA_NewChart", (HTuple("files").Append("follow_links")), 
      &ImageFiles);
  tuple_regexp_select(ImageFiles, (HTuple("\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima)$").Append("ignore_case")), 
      &ImageFiles);
  for (Index=0; Index<=(ImageFiles.Num())-1; Index+=1)
  {
    read_image(&Image, HTuple(ImageFiles[Index]));
    //Do something
    if (HDevWindowStack::IsOpen())
      close_window(HDevWindowStack::Pop());
    get_image_size(Image, &Width, &Height);
    rgb1_to_gray(Image, &GrayImage);
    zoom_image_size(GrayImage, &ImageZoom, 1600, 1200, "bilinear");
    get_image_size(ImageZoom, &Width, &Height);
    set_window_attr("background_color","black");
    open_window(0,0,Width/2,Height/2,0,"","",&WindowHandle);
    HDevWindowStack::Push(WindowHandle);
    if (HDevWindowStack::IsOpen())
      disp_obj(ImageZoom, HDevWindowStack::GetActive());

    mean_image(ImageZoom, &ImageMean, Width/2, Height/2);
    sub_image(ImageZoom, ImageMean, &ImageSub, 1, 128);
    emphasize(ImageSub, &ImageEmphasize, Width, Height, 1);

    threshold(ImageEmphasize, &Region, 0, 80);
    fill_up(Region, &RegionFillUp);
    connection(RegionFillUp, &ConnectedRegions);
    area_center(ConnectedRegions, &Area, &Row, &Column);
    tuple_max(Area, &Max);
    tuple_min(Area, &Min);
    select_shape(ConnectedRegions, &SelectedRegions, "area", "and", (Min+Max)/2, 
        Max+1);
    shape_trans(SelectedRegions, &RegionTrans, "inner_circle");
    area_center(RegionTrans, &Area, &RowRoll, &ColumnRoll);
    if (HDevWindowStack::IsOpen())
      clear_window(HDevWindowStack::GetActive());
    if (HDevWindowStack::IsOpen())
      disp_obj(ImageZoom, HDevWindowStack::GetActive());
    if (HDevWindowStack::IsOpen())
      disp_obj(RegionTrans, HDevWindowStack::GetActive());
    //stop ()

    RollWidth = 6;
    erosion_circle(RegionTrans, &RegionErosion, RollWidth);
    difference(RegionTrans, RegionErosion, &RegionDifference);
    difference(Region, RegionDifference, &RegionDifference);
    opening_circle(RegionDifference, &RegionOpening, 3.5);
    gen_rectangle1(&Rectangle, (Height*2)/10, (Width*2)/10, (Height*8)/10, (Width*8)/10);
    intersection(Rectangle, RegionOpening, &RegionIntersection);
    closing_circle(RegionIntersection, &RegionClosing, 13.5);
    connection(RegionClosing, &ConnectedRegions);
    shape_trans(ConnectedRegions, &RegionTransCircle, "convex");
    shape_trans(RegionTransCircle, &RegionTransCircle, "outer_circle");
    select_shape(RegionTransCircle, &SelectedRegionsCircle, "outer_radius", "and", 
        15, 39.494);
    area_center(SelectedRegionsCircle, &Area, &RowDot, &ColumnDot);
    if (HDevWindowStack::IsOpen())
      clear_window(HDevWindowStack::GetActive());
    if (HDevWindowStack::IsOpen())
      set_draw(HDevWindowStack::GetActive(),"margin");
    if (HDevWindowStack::IsOpen())
      disp_obj(ImageZoom, HDevWindowStack::GetActive());
    if (HDevWindowStack::IsOpen())
      disp_obj(RegionTrans, HDevWindowStack::GetActive());
    if (HDevWindowStack::IsOpen())
      disp_obj(SelectedRegionsCircle, HDevWindowStack::GetActive());
    // stop(); only in hdevelop
  }
}


#ifndef NO_EXPORT_APP_MAIN
int main(int argc, char *argv[])
{
  using namespace Halcon;
  // Default settings used in HDevelop (can be omitted) 
  set_system("do_low_error","false");
  action();
  return 0;
}
#endif


#endif


